name: Publish

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.label || github.ref }}

on:
  push:
    branches:
      - "*"

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          # ubuntu 24.04 is in beta. ubuntu-latest is 22.04 at time of writing. Our application won't build on 22.04.
          - ubuntu-24.04
        arch:
          - amd64

    runs-on: self-hosted
    # Service containers to run with `container-job`
    # services:
    #   # Label used to access the service container
    #   postgres:
    #     # Docker Hub image
    #     image: 'postgres:alpine'
    #     # Provide the password for postgres
    #     env:
    #       POSTGRES_USER: prisma_user
    #       POSTGRES_PASSWORD: CHANGE_ME_PLEASE_OR_I_WILL_CRY
    #       POSTGRES_DB: prisma
    #     # Set health checks to wait until postgres has started
    #     options: >-
    #       --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    #   redis:
    #     # Docker Hub image
    #     image: redis:alpine
    #     # Set health checks to wait until redis has started
    #     options: >-
    #       --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    #     ports:
    #       # Maps port 6379 on service container to the host
    #       - 6379:6379

    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GTK4
        run: |
          sudo apt update
          sudo apt install -y libgtk-4-dev libgirepository1.0-dev

      - name: ❤️‍🔥 Setup Golang
        uses: magnetikonline/action-golang-cache@v5
        with:
          go-version: "stable"
      # - name: 👁️ Ensure Code is Linted
      #   run: |
      #     pnpm lint:check
      # - name: 🚧 Ensure Code is Formatted
      #   run: |
      #     pnpm format:check
      - name: 📦 Install Dependencies
        run: |
          go mod download all
      - name: 🤖 Build Project
        run: |
          CGO_ENABLED=1 go build -v -o rokon main.go
      # - name: 📤 Upload Code coverage to Codecov
      #   if: ${{ !github.event.act }}
      #   uses: codecov/codecov-action@v4
      - name: 🗃️ Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: ${{ !github.event.act }}
        with:
          name: rokon-${{ runner.os }}-${{ matrix.arch }}
          path: ./rokon
      # - name: Import GPG key
      #   id: import_gpg
      #   if: ${{ !github.event.act }} && github.event_name != 'pull_request'
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.PASSPHRASE }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true
      #     git_tag_gpgsign: false
      #     git_push_gpgsign: false
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: 🌋 Publish to the great interwebs.
      #   uses: cycjimmy/semantic-release-action@v4
      #   if: ${{ !github.event.act }} && github.event_name != 'pull_request'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #     GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     signingKeyId: ${{ steps.import_gpg.outputs.keyid }}
      #     signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
      #     signingPassword: ${{ secrets.PASSPHRASE }}
      #     GH_URL: 'https://api.github.com/'
      #     HUSKY: 0
  arm:
    needs: build
    timeout-minutes: 560
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            distro: fedora_latest
          - arch: armv6
            distro: alpine_latest
          - arch: armv7
            distro: ubuntu_latest
        os:
          - ubuntu-24.04

    runs-on: self-hosted
    # Service containers to run with `container-job`
    # services:
    #   # Label used to access the service container
    #   postgres:
    #     # Docker Hub image
    #     image: 'postgres:alpine'
    #     # Provide the password for postgres
    #     env:
    #       POSTGRES_USER: prisma_user
    #       POSTGRES_PASSWORD: CHANGE_ME_PLEASE_OR_I_WILL_CRY
    #       POSTGRES_DB: prisma
    #     # Set health checks to wait until postgres has started
    #     options: >-
    #       --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    #   redis:
    #     # Docker Hub image
    #     image: redis:alpine
    #     # Set health checks to wait until redis has started
    #     options: >-
    #       --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    #     ports:
    #       # Maps port 6379 on service container to the host
    #       - 6379:6379

    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install QEMU
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static

      - name: Build ${{ matrix.arch }} on ${{ matrix.distro }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          shell: /bin/sh
          githubToken: ${{secrets.GITHUB_TOKEN}}
          install: |
            case "${{ matrix.distro }}" in
              alpine_latest)
                setup-apkrepos -c -1
                apk add --no-cache alpine-sdk gtk4.0-dev gobject-introspection-dev go
                ;;
              fedora_latest)
                dnf install -y @development-tools git gtk4-devel gobject-introspection-devel go
                ;;
              ubuntu_latest)
                apt update
                apt install -y build-essential git libgtk-4-dev libgirepository1.0-dev software-properties-common
                add-apt-repository -y ppa:longsleep/golang-backports
                apt update
                apt install -y golang-go
                ;;
            esac
          run: |
            go mod download all && go build -v -o "${PWD}/artifacts/rokon-${{matrix.arch}}" main.go
      - name: Show built binaries
        run: ls -la ./artifacts
      - name: Upload the entire directory
        uses: actions/upload-artifact@v4
        if: always()
        with:
          path: . # Upload the entire directory
          name: rokon-${{ matrix.distro }}-${{ matrix.arch }}
