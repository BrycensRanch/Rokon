name: Publish

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.label || github.ref }}

on:
  push:
    branches:
      - "*"

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  snap:
    timeout-minutes: 125
    if: ${{ github.event_name == 'pull_request' }}
    # force to run on github infra
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
      - uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.44.3
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Sanitize branch
        id: sanitize_branch
        run: |
          SANITIZED_BRANCH=$(echo "${{ steps.extract_branch.outputs.branch }}" | tr '/' '-' | tr -d '[:space:]' | cut -c 1-16)
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT

      - name: Set snapcraft version
        id: set_version
        run: |
          yq '.version = "${{ steps.extract_version.outputs.version }}-${{ steps.sanitize_branch.outputs.sanitized_branch }}.gha${{ github.run_number }}"' -i snapcraft.yaml
      - name: Switch snap branch
        run: yq '.parts.rokon.source-branch = "${{ steps.extract_branch.outputs.branch }}"' -i snapcraft.yaml
      - name: Switch snap git repository
        run: yq '.parts.rokon.source = "${{ github.server_url }}/${{ github.repository }}"' -i snapcraft.yaml
      - name: Force snap to be grade devel
        run: yq '.grade = "devel"' -i snapcraft.yaml
      - name: ü´∞ Assemble the Snap
        uses: snapcore/action-build@v1
        id: snapcraft_build
      - name: Test Installing Snap
        run: sudo snap install ${{ steps.snapcraft_build.outputs.snap }} --dangerous
      - name: Test Installed Snap
        run: rokon --version
      - uses: snapcore/action-publish@v1
        continue-on-error: true
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_LOGIN }}
        with:
          snap: ${{ steps.snapcraft_build.outputs.snap }}
          release: edge/${{ steps.sanitized_branch.sanitized_branch }}
      - name: üóÉÔ∏è Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-snap-${{ matrix.arch }}
          path: ${{ steps.snapcraft_build.outputs.snap }}
  docker:
    timeout-minutes: 125
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/Rokon
          # generate Docker tags based on the following events/attribute
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Container and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Test Docker Container
        continue-on-error: true
        run: docker run --rm ${{ steps.meta.outputs.tags }} /bin/sh -c "/app/rokon --version"
  build:
    timeout-minutes: 125
    strategy:
      fail-fast: false
      matrix:
        os:
          # ubuntu 24.04 is in beta. ubuntu-latest is 22.04 at time of writing. Our application won't build on 22.04.
          - ubuntu-24.04
        arch:
          - amd64
          # - arm64

    runs-on: self-hosted

    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Required System Packages
        run: |
          sudo apt update
          sudo add-apt-repository -y ppa:flatpak/stable
          sudo add-apt-repository ppa:longsleep/golang-backports -y
          sudo apt install -y libgtk-4-dev libgirepository1.0-dev flatpak flatpak-builder build-essential devscripts debhelper dh-make golang
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
          flatpak install --user -y flathub org.flatpak.Builder
      - name: üëÅÔ∏è Ensure Code is Linted
        continue-on-error: true
        run: |
          make inst
          make lint
          make spell
      - name: Lint AppStream Metadata
        run: |
          flatpak run --command=flatpak-builder-lint --user org.flatpak.Builder appstream usr/share/metainfo/io.github.brycensranch.Rokon.metainfo.xml
      # - name: üöß Ensure Code is Formatted
      #   run: |
      #     pnpm format:check
      - name: üì¶ Install Dependencies
        run: |
          go mod download all
      - uses: chrisdickinson/setup-yq@latest
        if: ${{ github.event_name == 'pull_request' }}
        with:
          yq-version: v4.44.3
      - name: üî∑ Update Flatpak Data
        run: |
          rm flathub/go.mod.yml flathub/modules.txt
          go mod tidy -go=1.22.0
          go mod vendor
          go run github.com/dennwc/flatpak-go-mod@latest .
          mv modules.txt go.mod.yml flathub/
          # the vendor directory disappears after running flatpak go mod LOL
          go mod vendor
      - name: COMMIT!
        if: ${{ !startsWith(github.ref, 'refs/heads/dep/') }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Only golang stuff! Prevents snapcraft.yaml from being updated on a PR branch! 
          file_pattern: '*.mod *.sum flathub/*.yml flathub/modules.txt'
          commit_options: "--no-verify --no-gpg-sign"
          push_options: "--no-verify --no-signed"
          commit_message: "build(flathub): update go vendor modules [skip ci]"
          commit_author: "github-actions <41898282+github-actions[bot]@users.noreply.github.com>"
      - name: Import GPG key
        id: import_gpg
        if: github.event_name != 'pull_request'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: false
      - name: üñºÔ∏è Assemble the AppImage
        run: |
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimagetool-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
          chmod +x appimagetool-*.AppImage
          mv appimagetool-* appimagetool
          sudo mv appimagetool /usr/bin
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
          chmod +x mkappimage-*.AppImage
          mv mkappimage-* mkappimage
          sudo mv mkappimage /usr/bin
          sudo apt install -y binutils coreutils desktop-file-utils fakeroot libgdk-pixbuf2.0-dev patchelf python3-pip python3-setuptools squashfs-tools strace util-linux zsync
          make fatimage
          ./*.AppImage --version
          mv *.AppImage ../artifacts
      - name: Extract branch name
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Set source branch for Flatpak
        if: ${{ github.event_name == 'pull_request' }}
        run: yq '.modules[0].sources[0].branch = "${{env.BRANCH_NAME}}"' -i flathub/io.github.brycensranch.Rokon-beta.yml
        env:
          BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}

      - name: Set source URL for Flatpak
        if: ${{ github.event_name == 'pull_request' }}
        run: yq '.modules[0].sources[0].url = "${{env.GITHUB_REPOSITORY_URL}}"' -i flathub/io.github.brycensranch.Rokon-beta.yml
        env:
          GITHUB_REPOSITORY_URL: "${{ github.server_url }}/${{ github.repository }}.git"

      - name: ‚öôÔ∏è Assemble the Flatpaks!
        if: ${{ github.event_name == 'pull_request' }}
        working-directory: flathub
        run: |
          flatpak-builder --install --user --install-deps-from=flathub --force-clean repo/ io.github.brycensranch.Rokon-beta.yml
          # I honestly have no idea what this does.
          flatpak build-export export repo
          # Create a Flatpak bundle for the beta version
          flatpak build-bundle export io.github.brycensranch.Rokon-beta.flatpak io.github.brycensranch.Rokon master --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo
      - name: Test Flatpak
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          flatpak --branch=beta --user run io.github.brycensranch.Rokon --version
      - name: ü§† Assemble the DEB
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        run: |
          debuild -i -I -d
          # Clean up any previous builds
          rm -rf build debian/build debian/tmp 
          # Move the DEB files to the root of the repository
          mv ../*.deb ../artifacts
      # - name: üì§ Upload Code coverage to Codecov
      #   if: ${{ !github.event.act }}
      #   uses: codecov/codecov-action@v4
      - name: Restore Build Artifacts
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          mv ../*.AppImage . || true
      - name: Find Comment
        if: always()
        uses: peter-evans/find-comment@v2
        continue-on-error: true
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
      - name: Get Artifact URL & PR Info
        continue-on-error: true
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          WORKFLOW_RUN_EVENT_OBJ: ${{ toJSON(github.event.workflow_run) }}
        run: |

          PREVIOUS_JOB_ID=$(jq -r '.id' <<< "$WORKFLOW_RUN_EVENT_OBJ")
          echo "Previous Job ID: $PREVIOUS_JOB_ID"
          echo "PREVIOUS_JOB_ID=$PREVIOUS_JOB_ID" >> "$GITHUB_ENV"

          ARTIFACT_URL=$(gh api "/repos/$OWNER/$REPO/actions/artifacts" \
            --jq ".artifacts.[] |
            select(.workflow_run.id==${PREVIOUS_JOB_ID}) |
            select(.expired==false) |
            .archive_download_url")

          echo "ARTIFACT URL: $ARTIFACT_URL"
          echo "ARTIFACT_URL=$ARTIFACT_URL" >> "$GITHUB_ENV"

          PR_NUMBER=$(jq -r '.pull_requests[0].number' \
            <<< "$WORKFLOW_RUN_EVENT_OBJ")

          echo "PR Number: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"

          HEAD_SHA=$(jq -r '.pull_requests[0].head.sha' \
            <<< "$WORKFLOW_RUN_EVENT_OBJ")

          echo "Head sha: $HEAD_SHA"
          echo "HEAD_SHA=$HEAD_SHA" >> "$GITHUB_ENV"

      - name: Update Comment
        continue-on-error: true
        if: ${{ github.event_name == 'pull_request' }}
        env:
          ARTIFACT_URL: "${{ github.server_url }}/${{ github.repository }}/actions/\
            runs/${{ env.PREVIOUS_JOB_ID }}"
          HEAD_SHA: ${{ env.HEAD_SHA }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ steps.find-comment.outputs.comment-id }}
          body: |-
            ## Build Preview
            
            [![badge]](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            You can find files attached to the below linked Workflow Run URL (Logs).
            
            Please note that files only stay for around 90 days!
  
            | Name      | Link                                                                                |
            |-----------|-------------------------------------------------------------------------------------|
            | Commit    | ${{ github.event.pull_request.head.sha }}                                           |
            | Logs      | ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} |
            | Artifacts | ${{ env.ARTIFACT_URL }}                                                             |
            
            [badge]: https://img.shields.io/badge/Build-Success!-3fb950?logo=github&style=for-the-badge
      - name: Update Comment
        continue-on-error: true
        if: ${{ failure() }} && ${{ github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ needs.find-comment.outputs.comment_id }}
          body: |-
            ## Build Preview
            
            [![badge]](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            There was an issue generating the build artifacts from your Pull request.
            Please review the logs linked below for further information.
            
            | Name   | Link                                                                                |
            |--------|-------------------------------------------------------------------------------------|
            | Commit | ${{ github.event.pull_request.head.sha }}                                           |
            | Logs   | ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} |
            
            [badge]: https://img.shields.io/badge/Build-Failure!-f85149?logo=github&style=for-the-badge
      - name: üóÉÔ∏è Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{ runner.os }}-${{ matrix.arch }}
          path: |
            rokon
            *.AppImage
            *.zsync
            *.rpm
            *.deb
            *.snap
            flathub/*.flatpak
      - name: üóëÔ∏è Remove Artifacts
        run: |
          make clean
      - name: List files
        run: ls -R
      - name: üóÉÔ∏è Upload Vendored Source
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-source
          path: .
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: üåã Publish to the great interwebs.
      #   uses: cycjimmy/semantic-release-action@v4
      #   if: ${{ !github.event.act }} && github.event_name != 'pull_request'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #     GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     signingKeyId: ${{ steps.import_gpg.outputs.keyid }}
      #     signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
      #     signingPassword: ${{ secrets.PASSPHRASE }}
      #     GH_URL: 'https://api.github.com/'
      #     HUSKY: 0
  windows:
    runs-on: windows-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
    env:
      result: msi
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build using MSYS2
        uses: ./.github/actions/build-msys2-app
        with:
          msys-dependencies: |
            mingw-w64-clang-x86_64-gcc
            mingw-w64-clang-x86_64-pkg-config
            mingw-w64-clang-x86_64-gtk4
            mingw-w64-clang-x86_64-gobject-introspection
            mingw-w64-clang-x86_64-go
            mingw-w64-clang-x86_64-upx
            mingw-w64-clang-x86_64-imagemagick
            make
          out-path: ${{ runner.temp }}/exe
          exe-name: Rokon.exe
      - name: Minimize executable size using upx
        working-directory: ${{ runner.temp }}/exe
        run: |
          upx -f --best --force-overwrite ./*.exe
      - name: Prepare
        id: prepare
        run: |
          version="v$(cat VERSION)"

          # version is usually in the format vMAJOR.MINOR.PATCH-N-HASH, while
          # Advanced Installer only allows format MAJOR.MINOR.PATCH.REVISION.
          # We trim out our hash, trim the leading v, and replace the first - with a .
          if [[ $version =~ ^v([0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?) ]]; then
            version=${BASH_REMATCH[1]}
            version=${version//-/.}
          else
            # Use some fallback version. Realistically, this should never
            # happen, so we throw a warning.
            version=0.0.0.999
            echo '::warning::Could not determine version from git for Windows build. Using `$version`'
          fi

          cat<<EOF >> "$GITHUB_OUTPUT"
          version=$version
          name=Rokon-Setup-${{ runner.arch }}
          EOF
      - name: Install
        run: |
          export RESULTSDIR=$(realpath "${{ runner.temp }}\\exe")
          make TARGET="$RESULTSDIR/Rokon.exe" PREFIX="$RESULTSDIR" BINDIR="$RESULTSDIR" install || true

      - name: Produce rtf files for installer and PDF files for end user
        working-directory: scripts/md2rtf
        run: |
          export RESULTSDIR=$(realpath "${{ runner.temp }}\\exe")
          go run -v . md2rtf
          go run -v . md2pdf
          # TODO: Have MSI installer actually install the pdf files

          # The conversion to rtf with colors and what not seems legally questionable so...
          wget https://www.gnu.org/licenses/agpl-3.0.rtf || true
          mv agpl-3.0.rtf LICENSE.rtf || true
          if [ -e LICENSE.rtf ]; then
              rm ../../LICENSE.rtf || true
          fi
          mv LICENSE.rtf ../../ || true
          mv ../../*.pdf $RESULTSDIR
          mv ../../*.rtf ../../windows

      - name: Make MSI installer
        uses: ./.github/actions/make-advinst-app
        with:
          aip-file: windows/rokon.aip
          exe-directory: ${{ runner.temp }}/exe
          exe-name: Rokon.exe
          app-name: Rokon
          app-version: ${{ steps.prepare.outputs.version }}
          icon-file: windows/assets/rokon.ico
          out-path: .
          out-name: ${{ steps.prepare.outputs.name }}
      - name: Test MSI Install
        shell: pwsh
        run: |
          $logFile = "install.log"
          $msiName = "${{ steps.prepare.outputs.name }}.msi"

          Start-Process msiexec.exe -ArgumentList "/i $msiName /quiet /norestart /l*v $logFile" -NoNewWindow -Wait

          # Output the log to stdout
          if (Test-Path $logFile) {
            Get-Content $logFile
          } else {
            Write-Host "Log file not found."
          }
      - name: Check --version command
        run: |
          "C:\Program Files\BrycensRanch\Rokon\Rokon.exe" --version
      - name: Remove msi executable
        run: rm "${{ runner.temp }}\\exe\\Rokon.exe"
      - name: Make Portable
        run: |
          export RESULTSDIR=$(realpath "${{ runner.temp }}\\exe")
          make TARGET="$RESULTSDIR/Rokon.exe" EXTRALDFLAGS="-s -w -H windowsgui" EXTRAGOFLAGS="-trimpath" BUILDTAGS=$BUILD_TAGS PACKAGEFORMAT=portable PACKAGED=true build
          cp windows/*.txt "$RESULTSDIR"
      - name: Minimize portable executable size using upx
        working-directory: ${{ runner.temp }}\exe
        continue-on-error: true
        run: |
          upx --best -f --force-overwrite ./*.exe
      - name: üóÉÔ∏è Upload Built Result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{ runner.os }}-${{ matrix.arch }}
          path: $result
      - name: üóÉÔ∏è Upload Portable
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{ runner.os }}-Portable-${{ matrix.arch }}
          path: ${{ runner.temp }}/exe
  macos:
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-15
          - macos-13 # macOS 13 is Monterey and it runs on amd64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GTK4 Golang
        run: |
          brew install gtk4 gobject-introspection go create-dmg dylibbundler rsync tree
      - name: üì¶ Install Dependencies
        run: |
          go mod download all
      - name: ü§ñ Build Project
        run: |
          make PACKAGED=true PACKAGEFORMAT=dmg EXTRAGOFLAGS="-trimpath" build
      - name: üêï Install
        run: |
          make PREFIX=./macos BINDIR=./macos APPLICATIONSDIR=. METAINFODIR=. install
      # Attribution: https://github.com/getseabird/seabird/blob/main/.github/workflows/release.yaml#L194
      # Word for Word, bar for bar.
      - name: üóø Produce DMG
        run: |
          result=./macos
          brew_prefix=$(brew --prefix)
          mkdir -p $result/lib/gdk-pixbuf-2.0 $result/share/glib-2.0/schemas $result/share/icons
          cp README.md PRIVACY.md LICENSE.md $result
          dylibbundler -b -d $result/lib -x $result/rokon
          cp -f $brew_prefix/lib/*.dylib $result/lib
          cp -r $brew_prefix/lib/gdk-pixbuf-2.0 $result/lib
          sed -i '' "s|$brew_prefix/||" $result/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
          cp -r $brew_prefix/share/glib-2.0/schemas $result/share/glib-2.0
          cp -r $brew_prefix/opt/gtk4/share/gtk-4.0 $result/share
          cp -r $brew_prefix/share/icons/hicolor $result/share/icons
          rsync -a --exclude "$result/dmg/" "$result/" "$result/dmg/Rokon.app/Contents/MacOS"

          set +e
          false
          while [ $? -ne 0 ]; do
            create-dmg --volname Rokon --volicon macos/icon.icns --window-size 600 400 --icon-size 100 --icon "Rokon.app" 200 150 --hide-extension "Rokon.app" --app-drop-link 400 150 Rokon_macOS_${{ runner.arch }}.dmg $result/dmg
          done
      - name: Find and mount DMG
        id: mount-dmg
        run: |
          # Use globbing to find the first DMG file
          dmg_file=(*.dmg)
          if [ ! -e "$dmg_file" ]; then
            echo "No DMG file found!"
            exit 1
          fi
          echo "Found DMG file: $dmg_file"
          
          # Mount the DMG
          hdiutil attach "$dmg_file" -nobrowse -quiet
          echo "DMG mounted."

          # Export the mount point for later use
          echo "::set-output name=mount_point::$(ls /Volumes)"

      - name: Install DMG
        run: |
          mount_point="/Volumes/Rokon"
          
          # Check if the mount point exists
          if [ -d "$mount_point" ]; then
            
            app_name="$mount_point/Rokon.app"
            sudo tree "$app_name"
            
            if [ -d "$app_name" ]; then
              sudo cp -R "$app_name" /Applications/
              echo "Application installed."
            else
              echo "Application not found in DMG."
              exit 1
            fi
          else
            echo "Mount point does not exist."
            exit 1
          fi
        shell: /bin/bash -e {0}


      - name: Unmount DMG
        run: |
          mount_point="/Volumes/Rokon"
          hdiutil detach "$mount_point" || echo "Failed to unmount DMG."

      - name: Confirm installation
        run: |
          if ! ls /Applications | grep -q "Rokon.app"; then
            echo "Error: Application not found in /Applications."
            exit 1
          fi
          echo "Application confirmed in /Applications."
          tree /Applications/Rokon.app
      - name: üóÉÔ∏è Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{ runner.os }}-${{ runner.arch }}
          path: |
            ./rokon
            *.dmg
            *.app
            *.pkg
