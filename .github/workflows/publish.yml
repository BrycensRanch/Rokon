name: Publish

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.label || github.ref }}

on:
  push:
    branches:
      - "*"

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          # ubuntu 24.04 is in beta. ubuntu-latest is 22.04 at time of writing. Our application won't build on 22.04.
          - ubuntu-24.04
        arch:
          - amd64

    runs-on: self-hosted
    # Service containers to run with `container-job`
    # services:
    #   # Label used to access the service container
    #   postgres:
    #     # Docker Hub image
    #     image: 'postgres:alpine'
    #     # Provide the password for postgres
    #     env:
    #       POSTGRES_USER: prisma_user
    #       POSTGRES_PASSWORD: CHANGE_ME_PLEASE_OR_I_WILL_CRY
    #       POSTGRES_DB: prisma
    #     # Set health checks to wait until postgres has started
    #     options: >-
    #       --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    #   redis:
    #     # Docker Hub image
    #     image: redis:alpine
    #     # Set health checks to wait until redis has started
    #     options: >-
    #       --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    #     ports:
    #       # Maps port 6379 on service container to the host
    #       - 6379:6379

    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GTK4
        run: |
          sudo apt update
          sudo apt install -y libgtk-4-dev libgirepository1.0-dev

      - name: ‚ù§Ô∏è‚Äçüî• Setup Golang
        uses: magnetikonline/action-golang-cache@v5
        with:
          go-version: "stable"
      - name: üëÅÔ∏è Ensure Code is Linted
        continue-on-error: true
        run: |
          make inst
          make lint
          make spell
      # - name: üöß Ensure Code is Formatted
      #   run: |
      #     pnpm format:check
      - name: üì¶ Install Dependencies
        run: |
          go mod download all
      - name: ü§ñ Build Project
        run: |
          make build
      # - name: üì§ Upload Code coverage to Codecov
      #   if: ${{ !github.event.act }}
      #   uses: codecov/codecov-action@v4
      - name: üóÉÔ∏è Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: ${{ !github.event.act }}
        with:
          name: rokon-${{ runner.os }}-${{ matrix.arch }}
          path: ./rokon
      # - name: Import GPG key
      #   id: import_gpg
      #   if: ${{ !github.event.act }} && github.event_name != 'pull_request'
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.PASSPHRASE }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true
      #     git_tag_gpgsign: false
      #     git_push_gpgsign: false
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: üåã Publish to the great interwebs.
      #   uses: cycjimmy/semantic-release-action@v4
      #   if: ${{ !github.event.act }} && github.event_name != 'pull_request'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #     GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
      #     GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      #     signingKeyId: ${{ steps.import_gpg.outputs.keyid }}
      #     signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
      #     signingPassword: ${{ secrets.PASSPHRASE }}
      #     GH_URL: 'https://api.github.com/'
      #     HUSKY: 0
  windows:
    runs-on: windows-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build using MSYS2
        uses: ./.github/actions/build-msys2-app
        with:
          msys-dependencies: |
            mingw-w64-clang-x86_64-gcc
            mingw-w64-clang-x86_64-pkg-config
            mingw-w64-clang-x86_64-gtk4
            mingw-w64-clang-x86_64-gobject-introspection
            mingw-w64-clang-x86_64-glib2
            mingw-w64-clang-x86_64-go
            mingw-w64-clang-x86_64-upx
            mingw-w64-clang-x86_64-nodejs
          out-path: ${{ runner.temp }}/exe
          exe-name: Rokon.exe
      - name: Minimize executable size using upx
        working-directory: ${{ runner.temp }}/exe
        run: |
          upx ./*.exe
      - name: Prepare
        id: prepare
        run: |
          version="v1.0.0"

          # version is usually in the format vMAJOR.MINOR.PATCH-N-HASH, while
          # Advanced Installer only allows format MAJOR.MINOR.PATCH.REVISION.
          # We trim out our hash, trim the leading v, and replace the first - with a .
          if [[ $version =~ ^v([0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?) ]]; then
            version=${BASH_REMATCH[1]}
            version=${version//-/.}
          else
            # Use some fallback version. Realistically, this should never
            # happen, so we throw a warning.
            version=0.0.0.999
            echo '::warning::Could not determine version from git for Windows build. Using `$version`'
          fi

          cat<<EOF >> "$GITHUB_OUTPUT"
          version=$version
          name=Rokon-Setup-${{ runner.arch }}
          EOF
      - name: install bloated node_modules
        run: |
          npm install
      - name: Generate rich text files from Markdown
        run: |
          node .github/generate-rtf.js
      - name: Make MSI installer
        uses: ./.github/actions/make-advinst-app
        with:
          aip-file: windows/rokon.aip
          exe-directory: ${{ runner.temp }}/exe
          exe-name: Rokon.exe
          app-name: Rokon
          app-version: ${{ steps.prepare.outputs.version }}
          icon-file: windows/assets/rokon.ico
          out-path: result
          out-name: ${{ steps.prepare.outputs.name }}
      - name: Make Portable
        run: |
          cp windows/portable.txt "${{ runner.temp }}/exe"

      - name: üóÉÔ∏è Upload Built Result
        uses: actions/upload-artifact@v4
        if: ${{ !github.event.act }}
        with:
          name: rokon-${{ runner.os }}-${{ matrix.arch }}
          path: result
      - name: üóÉÔ∏è Upload Portable
        uses: actions/upload-artifact@v4
        if: ${{ !github.event.act }}
        with:
          name: rokon-${{ runner.os }}-Portable-${{ matrix.arch }}
          path: ${{ runner.temp }}/exe
  macos:
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-15
          - macos-13 # macOS 13 is Monterey and it runs on amd64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GTK4 Golang
        run: |
          brew install gtk4 gobject-introspection go gtkmm4 cairomm
      - name: üì¶ Install Dependencies
        run: |
          go mod download all
      - name: ü§ñ Build Project
        run: |
          make build
      - name: üóÉÔ∏è Upload Built Binaries
        uses: actions/upload-artifact@v4
        if: ${{ !github.event.act }}
        with:
          name: rokon-${{ runner.os }}-${{ runner.arch }}
          path: ./rokon
