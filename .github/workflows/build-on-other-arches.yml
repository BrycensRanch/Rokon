name: Build On Other Arches

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# This workflow is triggered automatically by ./publish.yml (as Github Actions) after a Arch Linux run.
# This was done to bypass GitHub's UI. I don't want to see these architectures building when I'm doing builds.
# They take a long time thanks to QEMU and slow down Nightly.link builds being updated.

on:
  workflow_dispatch:
env:
  EXTRAGOFLAGS: "-buildvcs=false"
  # AppImages in Docker Containers suck.
  APPIMAGE_EXTRACT_AND_RUN: 1
jobs:
  arm64_docker:
    timeout-minutes: 3000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Docker Build Environment
        id: meta
        uses: ./.github/actions/setup-docker-build-env
        with:
          tmpfs: "true"
      - name: Build Docker Container and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/aarch64
          file: packaging/docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
  multiarch:
    timeout-minutes: 3000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Docker Build Environment
        id: meta
        uses: ./.github/actions/setup-docker-build-env
        with:
          tmpfs: "false"
          flavor: |
            latest=auto
            prefix=multiarch-
      - name: Build Docker Container and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/386, linux/amd64, linux/arm, linux/aarch64, linux/riscv64
          file: packaging/docker/multiarch.Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract tarball from each platform
        run: |
          platforms=("linux/386" "linux/amd64" "linux/arm" "linux/aarch64" "linux/riscv64")


          version=$(make version | awk '{print $2}')

          for platform in "${platforms[@]}"; do
            echo "Extracting tarball from platform $platform"
            # Typically multi line, I only want the first line
            tag=$(echo "$DOCKER_METADATA_OUTPUT_TAGS" | head -n 1)

            container_id=$(docker create --platform $platform $tag)

            mkdir -p ./tarball/${platform}

            docker cp $container_id:/app ./tarball/${platform}

            docker rm $container_id

            tarball_name="Rokon-${version}-Linux-$(basename $platform).tar.gz"

            tar -czf $tarball_name ./tarball/${platform}
          done
      - name: List files
        run: ls -R
      - name: Install dependencies
        run: |
          # Install necessary dependencies
          sudo apt -y install zsync desktop-file-utils python3 python3-pip fakeroot python3-setuptools squashfs-tools util-linux appstream software-properties-common make
          sudo add-apt-repository universe
          sudo apt install -y libfuse2t64

      - name: Setup mkappimage
        run: |
          if [ ! -f /usr/local/bin/mkappimage ]; then
            echo "Downloading mkappimage..."
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x *.AppImage
            mv mkappimage-* mkappimage
            sudo mv mkappimage /usr/local/bin
          else
            echo "mkappimage is already installed"
          fi

      - name: Generate AppImage for each platform
        run: |
          platforms=("linux/386" "linux/amd64" "linux/arm" "linux/aarch64")
          for platform in "${platforms[@]}"; do
            echo "Creating AppImage for platform $platform"
            PLATFORM=$platform
            PLATFORM_ARCH=$(basename $platform)
            case "$platform" in
              "linux/386")
                ARCH="i686"
                ;;
              "linux/amd64")
                ARCH="x86_64"
                ;;
              "linux/arm")
                ARCH="armhf"
                ;;
              "linux/aarch64")
                ARCH="aarch64"
                ;;
              *)
                echo "Unknown platform $platform"
                continue
                ;;
            esac

            RUNDIR="./tarball/${PLATFORM}/app"

            mkdir -p $RUNDIR

            make RUNDIR=$RUNDIR ARCH=$ARCH basedimage
          done
      - name: Generate Runfile for each platform
        run: |
          platforms=("linux/386" "linux/amd64" "linux/arm" "linux/aarch64" "linux/riscv64")
          for platform in "${platforms[@]}"; do
            echo "Creating Runfile for platform $platform"
            PLATFORM=$platform
            PLATFORM_ARCH=$(basename $platform)
            case "$platform" in
              "linux/386")
                ARCH="i686"
                ;;
              "linux/amd64")
                ARCH="x86_64"
                ;;
              "linux/arm")
                ARCH="armhf"
                ;;
              "linux/aarch64")
                ARCH="aarch64"
                ;;
              *)
                echo "Unknown platform $platform"
                ARCH=$(basename $platform)
                ;;
            esac

            TARBALLDIR="./tarball/${PLATFORM}/app"
            mkdir -p $TARBALLDIR

            make RUNDIR=$TARBALLDIR ARCH=$ARCH basedrun
          done
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Rokon-${{runner.os}}-runfile
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
            *.run.zsync
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Rokon-${{runner.os}}-tarball
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Rokon-AppImage
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
