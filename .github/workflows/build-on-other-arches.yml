name: Build On Other Arches

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# This workflow is triggered automatically by ./publish.yml (as Github Actions) after a Arch Linux run.
# This was done to bypass GitHub's UI. I don't want to see these architectures building when I'm doing builds.
# They take a long time thanks to QEMU and slow down Nightly.link builds being updated.

on:
  workflow_dispatch:
env:
  EXTRAGOFLAGS: "-buildvcs=false"
jobs:
  build_aarch64:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock

      - name: Build aarch64 on fedora_latest
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: fedora_latest
          setup: |
            mkdir -p "${PWD}/artifacts"
          shell: /bin/sh
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerRunArgs: "--device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined"
          install: |
            dnf install -y @development-tools gtk4-devel gobject-introspection-devel go @development-libs @rpm-development-tools wget fuse fuse-libs
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimagetool-.*-aarch64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x appimagetool-*.AppImage
            mv appimagetool-* appimagetool
            mv appimagetool /usr/bin
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-aarch64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            mv mkappimage /usr/bin
            git config --global --add safe.directory '*'
            wget https://github.com/megastep/makeself/releases/download/release-2.5.0/makeself-2.5.0.run
            chmod +x *.run
          run: |
            make run
            make tarball
            make fatimage
            spectool -g -R ./rokon.spec
            dnf builddep -y ./rokon.spec
            rpmbuild -ba ./rokon.spec
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-i386
          path: |
            tarball
            AppDir
            run
            *.AppImage
            *.tar*
            ~/rpmbuild
            *.rpm
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-aarch64
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-aarch64
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-aarch64
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
  build_armv7:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock

      - name: Build armv7 on ubuntu_latest
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: armv7
          distro: ubuntu_latest
          setup: |
            mkdir -p "${PWD}/artifacts"
          shell: /bin/sh
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerRunArgs: "--device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined"
          install: |
            apt update
            apt install -y build-essential git wget libgtk-4-dev libgirepository1.0-dev software-properties-common patchelf fakeroot desktop-file-utils appstream binutils python3 zsync util-linux strace squashfs-tools python3-pip python3-setuptools
            git config --global --add safe.directory '*'
            add-apt-repository -y ppa:longsleep/golang-backports
            add-apt-repository -y universe
            apt update
            apt install -y golang-go libfuse2t64
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimagetool-.*-armhf.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x appimagetool-*.AppImage
            mv appimagetool-* appimagetool
            mv appimagetool /usr/bin
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-armhf.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            mv mkappimage /usr/bin
            wget https://github.com/megastep/makeself/releases/download/release-2.5.0/makeself-2.5.0.run
            chmod +x *.run
          run: |
            make EXTRAGOFLAGS="${{env.EXTRAGOFLAGS}}" run
            make EXTRAGOFLAGS="${{env.EXTRAGOFLAGS}}" tarball
            make EXTRAGOFLAGS="${{env.EXTRAGOFLAGS}}" fatimage
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-i386
          path: |
            tarball
            AppDir
            run
            *.AppImage
            *.tar*
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-armv7
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-armv7
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-armv7
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
  build_i386:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock

      - name: Build i386 (32 bit) on Debian Testing
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: none
          distro: none
          base_image: i386/debian:testing
          dockerRunArgs: "--device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined"
          setup: |
            mkdir -p "${PWD}/artifacts"
          shell: /bin/sh
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          install: |
            apt update
            apt install -y build-essential libgtk-4-dev wget libgirepository1.0-dev git golang-go patchelf fakeroot desktop-file-utils appstream binutils python3 zsync util-linux strace squashfs-tools python3-pip python3-setuptools libfuse2t64
            git config --global --add safe.directory '*'
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimagetool-.*-i686.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x appimagetool-*.AppImage
            mv appimagetool-* appimagetool
            mv appimagetool /usr/bin
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-i686.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            mv mkappimage /usr/bin
            wget https://github.com/megastep/makeself/releases/download/release-2.5.0/makeself-2.5.0.run
            chmod +x *.run
          run: |
            make run
            make tarball
            make fatimage
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-i386
          path: |
            tarball
            AppDir
            run
            *.AppImage
            *.tar*
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-i386
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-i386
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-i386
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
