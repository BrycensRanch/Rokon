name: Build On Other Arches

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# This workflow is triggered automatically by ./publish.yml (as Github Actions) after a Arch Linux run.
# This was done to bypass GitHub's UI. I don't want to see these architectures building when I'm doing builds.
# They take a long time thanks to QEMU and slow down Nightly.link builds being updated.

on:
  workflow_dispatch:
env:
  EXTRAGOFLAGS: "-buildvcs=false"
  # AppImages in Docker Containers suck.
  APPIMAGE_EXTRACT_AND_RUN: 1
jobs:
  normal_docker:
    timeout-minutes: 3000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/rokon
          # generate Docker tags based on the following events/attribute
          tags: |
            type=edge,branch=master
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Container and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/ppc64le, linux/s390x, linux/aarch64
          cache-from: type=gha
          cache-to: type=gha,mode=max
  multiarch:
    timeout-minutes: 3000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Docker Build Environment
        id: meta
        uses: ./.github/actions/setup-docker-build-env
        with:
          flavor: |
            latest=auto
            prefix=multiarch-
      - name: Build Docker Container and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/386, linux/amd64, linux/arm, linux/aarch64, linux/ppc64le,linux/riscv64,linux/s390x
          file: multiarch.Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build_aarch64:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock
      - name: Load FUSE.
        run: modprobe fuse

      - name: Build aarch64 on fedora_latest
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: fedora_latest
          env: |
            CC: "clang"
            CXX: "clang++"
          setup: |
            mkdir -p "${PWD}/artifacts"
            git config --global --add safe.directory '*'
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          install: |
            dnf install -y clang git gtk4-devel gobject-introspection-devel go wget shc
          run: |
            git config --global --add safe.directory '*'
            make run
            make tarball
            make NOTB=1 TARBALLDIR=./AppDir TBPKGFMT=AppImage tarball
      - name: Create Bootleg AppImage
        run: |
            sudo apt -y install zsync desktop-file-utils python3 python3-pip fakeroot python3-setuptools squashfs-tools util-linux appstream software-properties-common && sudo add-apt-repository universe && sudo apt install -y libfuse2t64
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            sudo mv mkappimage /usr/local/bin
            sudo chown -R $(whoami) ./AppDir
            make TARBALLDIR=./AppDir ARCH=aarch64 basedimage
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-armhf
          path: |
            tarball
            run
            AppDir
            *.AppImage
            *.tar*
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-aarch64
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
            *.run.zsync
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-aarch64
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-aarch64
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
  build_armhf:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock
      - name: Load FUSE.
        run: modprobe fuse

      - name: Build armhf on ubuntu_latest
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: armv7
          distro: none
          base_image: docker.io/arm32v7/mageia:cauldron
          env: |
            CC: "clang"
            CXX: "clang++"
          setup: |
            mkdir -p "${PWD}/artifacts"
            git config --global --add safe.directory '*'
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          install: |
            dnf in -y dnf5
            dnf5 install -y clang git gtk4-devel gobject-introspection-devel go wget shc
          run: |
            git config --global --add safe.directory '*'
            make run
            make tarball
            make NOTB=1 TARBALLDIR=./AppDir TBPKGFMT=AppImage tarball
      - name: Create Bootleg AppImage
        run: |
            sudo apt -y install zsync desktop-file-utils python3 python3-pip fakeroot python3-setuptools squashfs-tools util-linux appstream software-properties-common && sudo add-apt-repository universe && sudo apt install -y libfuse2t64
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            sudo mv mkappimage /usr/local/bin
            sudo chown -R $(whoami) ./AppDir
            make TARBALLDIR=./AppDir ARCH=armhf basedimage
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-armhf
          path: |
            tarball
            AppDir
            run
            *.AppImage
            *.tar*
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-armhf
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
            *.run.zsync
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-armhf
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-armhf
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
  build_i686:
    timeout-minutes: 2000
    runs-on: ubuntu-24.04
    steps:
      - name: Check out current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if /var/run/docker.sock is mounted
        run: |
          ls -la /var/run/docker.sock
      - name: Load FUSE.
        run: modprobe fuse

      - name: Build i686 (32 bit Intel) on Debian Sid
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: none
          distro: none
          base_image: i386/debian:sid
          env: |
            CC: "clang"
            CXX: "clang++"
          setup: |
            mkdir -p "${PWD}/artifacts"
            git config --global --add safe.directory /home/runner/work/Rokon/Rokon
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          install: |
            apt update
            apt install -y clang make libgtk-4-dev wget libgirepository1.0-dev git golang-go file shc
          run: |
            git config --global --add safe.directory /home/runner/work/Rokon/Rokon
            git config --global --add safe.directory '*'
            make run
            make tarball
            make NOTB=1 TARBALLDIR=./AppDir TBPKGFMT=AppImage tarball
      - name: Create Bootleg AppImage
        run: |
            sudo apt -y install zsync desktop-file-utils python3 python3-pip fakeroot python3-setuptools squashfs-tools util-linux appstream software-properties-common && sudo add-apt-repository universe && sudo apt install -y libfuse2t64
            wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "mkappimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
            chmod +x mkappimage-*.AppImage
            mv mkappimage-* mkappimage
            sudo mv mkappimage /usr/local/bin
            sudo chown -R $(whoami) ./AppDir
            make TARBALLDIR=./AppDir ARCH=i686 basedimage
      - name: üò≠ Upload Failed Directories For Debug
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: rokon-${{runner.os}}-failed-i686
          path: |
            tarball
            AppDir
            run
            *.AppImage
            *.tar*
          include-hidden-files: true
          if-no-files-found: error
      - name: üóÉÔ∏è Upload Built Runfile üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-runfile-armhf
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.run
            *.run.zsync
      - name: üóÉÔ∏è Upload Built Tarball üì¶
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rokon-${{runner.os}}-tarball-armhf
          include-hidden-files: true
          if-no-files-found: error
          path: |
            *.tar.gz
            *tar*.zsync
      - name: üóÉÔ∏è Upload Built AppImage üì¶
        uses: actions/upload-artifact@v4
        if: always()

        with:
          name: rokon-AppImage-armhf
          if-no-files-found: error
          path: |
            *.AppImage
            *.AppImage.zsync
