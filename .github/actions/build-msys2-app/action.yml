# Action taken from getseabird/seabird:
# https://github.com/getseabird/seabird/blob/fd49c18b0601021a1a4b312a1d1c67b0dc7fe150/.github/workflows/release.yaml#L59

name: Build using MSYS2
description: Build a Go application using MSYS2 and produce a Windows executable.
inputs:
  exe-name:
    description: Name of the executable to produce, must end in .exe
    required: true
  out-path:
    description: Path to the output directory, which contains the executable and all its libraries
    default: result
  msys-system:
    description: MSYS2 system to use
    default: CLANG64
  msys-dependencies:
    description: MSYS2 packages to install
    required: true
  build-tags:
    description: Build tags to use
    default: ""
runs:
  using: composite
  steps:
    - name: Install MSYS2 Environment
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        update: true
        install: |
          git
          zip
          p7zip
          ${{ inputs.msys-dependencies }}
    - name: Cache Go modules and build cache
      uses: actions/cache@v4
      with:
          path: |
            C:/a/msys64/var/cache/pacman/pkg             # Cache MSYS2 packages
            C:/a/msys64/clang64/lib/go                   # Cache Go
            C:/a/msys64/tmp/go-build                     # Cache Go build cache
          key: go-msys2-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-msys2-${{ runner.os }}-

    - name: Build
      id: build
      run: |
        export PATH="/clang64/bin:$PATH"

        mkdir "$OUT_PATH"
        out=$(realpath "$OUT_PATH")

        # Build Rokon
        go build -ldflags "-H windowsgui" -o "$out/$EXE_NAME" -tags "$BUILD_TAGS"

        # copyDLLs copies all required DLLs of the given binaries to the
        # result directory.
        copyDLLs() {
          ldd "$@" \
            | { grep "=> /clang64/bin/" || true; } \
            | cut -d ' ' -f1 \
            | xargs -I{} cp /clang64/bin/{} $out/
        }

        # Copy all of the binary's dependencies to the result directory.
        copyDLLs "$out/$EXE_NAME"

        # countDLLs returns the number of DLLs in the result directory.
        # We use this to recursively copy dependencies until no new DLLs are
        # found.
        countDLLs() {
          find $out -type f -name "*.dll" | wc -l
        }

        # Copy DLLs recursively until no new ones are found.
        currentCount=$(countDLLs)
        while true; do
          copyDLLs $out/*.dll

          newCount=$(countDLLs)
          (( newCount == currentCount )) && break
          currentCount=$newCount
        done

        # Copy the RSVG and GDBus stuff.
        cp \
          /clang64/bin/librsvg*.dll \
          /clang64/bin/gdbus.exe \
          $out

        # Copy the GLib schemas and GTK resources.
        (
          cd /clang64
          cp --parents -r \
            share/glib-2.0/schemas/gschemas.compiled \
            share/gtk-4.0 \
            share/icons \
            lib/gdk-pixbuf-2.0 \
            $out
        )
      shell: msys2 {0}
      env:
        GOROOT: /clang64/lib/go
        GOPATH: /clang64
        EXE_NAME: ${{ inputs.exe-name }}
        OUT_PATH: ${{ inputs.out-path }}
        BUILD_TAGS: ${{ inputs.build-tags }}
